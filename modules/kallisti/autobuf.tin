#nop --
#nop Class Definitions
#nop --

#var kallisti/autobuf-description {Handle character bufs automatically}
#var kallisti/autobuf-help {
This module will loop through any affects you want and fire off commands\n
to re-apply affects as desired.\n
\n
Usage: pref autobuf <affect> <auto|potion|spell|none> <threshold>\n
Affect is something like "sanctuary", and threshold is the number of ticks\n
remaining when we should start calling for renewal.\n
\n
Potion method: define an alias "potion", it will be called with %1 being the\n
affect you want, so you can use #switch and use 'purple' for sanctuary, or\n
even read a scroll, etc.
}

#nop --
#nop Modloader Stuff
#nop --

#alias kallisti/autobuf-register {
	#if {@isloaded{queues}} {
        autobuf_init;
		register_module kallisti/autobuf
	} {
		fail_module kallisti/autobuf Need queues module
	}
}

#tick {auto bufs} {autoBufPulse} {4}

#var autobuf_delay 15;

#nop -- Preference Management --
init sanctMethod preferences auto;
init toggle[ranged] preferences off;
init toggle[tale] preferences off;
init toggle[guardian] preferences off;
init toggle[bladebarrier] preferences off;
init focusStat preferences dex;
init toggle[focus] preferences off;
init toggle[warcry] preferences off;
init toggle[haste] preferences off;
init toggle[ceyes] preferences off;

#foreach {autobless;autobark;autostatic;autoaura;autogrim;autodshield;autoffire} {tmp} {
    init $tmp preferences off;
}

event_register {show preferences} {kallisti/autobuf} {autobuf_preferences};
event_register {set preferences} {kallisti/autobuf} {autobuf_set_preferences}; 
event_register {autobuf expiration} {kallisti/autobuf} {autobuf_handler {%2}};

#alias autobuf_init {
    #nop -- renewable spells;
    #foreach {faerie fire;true seeing;sanctuary;shapechange} {_tmp} {
        #if {!&{_autobufs[$_tmp]}} {
            autobuf_set_pref_specific {$_tmp} none 1
        }
    }
}

#alias autobuf_preferences {
    #nop %0;
    #if {("%2" == "autobuf") || ("%2" == "")} {
        #showme <afc>Autobuf;
        #foreach {*_autobufs[%*]} {tmp} {
        #format line {<caf>%+12s: <fac>%-10s} {$tmp} {$_autobufs[$tmp][method]};
        #showme $line
        };
    #format line {<caf>%+12s: <fac>%-10s} {Focus Stat} {$focusStat};
    #showme $line
    }
}

#alias autobuf_set_preferences {
    #if {"%2" == "autobuf"} {
        autobuf_set_pref_specific %3 %4 %5;
        pref_handled
    } {
        #switch {"%2"} {
            #case {"sanctuary"} {
                autobuf_set_pref_specific %2 %3 %4;
                pref_handled
            };
            #case {"ffire"} {
                autobuf_set_pref_specific {faerie fire} %3 %4;
                pref_handled
            };
            #case {"truesee"} {
                autobuf_set_pref_specific {true seeing} %3 %4;
                pref_handled
            };
            #case {"shapechange"} {
                autobuf_set_pref_specific {shapechange} %3 %4;
                pref_handled
            };
            #case {"strength"} {
                autobuf_set_pref_specific {strength} %3 %4;
                pref_handled
            };
            #case {"focus"} {
                #var focusStat %3;
                warn autobuf You will now use '%3' as your focus stat.;
                pref_handled
            }
        }
    }
}

#nop -- This is buf, method, threshold
#alias {autobuf_set_pref_specific} {
    #if {"%3" === ""} {
        #regexp {%2} {^%d$} {
            #class preferences assign #var _autobufs[%1][threshold] %2;
            notice autobuf %1 threshold set to %2 ticks;
        } {
            #showme single arg, set %1 to method %2;
            #class preferences assign #var _autobufs[%1][method] %2;
            notice autobuf %1 method set to %2;
            #if {!&{_autobufs[%1][threshold]}} {
                notice autobuf %1 threshold set to %1;
                #class preferences assign #var _autobufs[%1][threshold] 1;
            }
        }
    } {
        #regexp {%2 %3} {^%w %d$} {
            #class preferences assign #var _autobufs[%1] {{method}{%2}{threshold}{%3}};
            notice autobuf %1 method set to %2, threshold set to %3;
        } {
            err autobuf Usage: pref %1 <method> <threshold>;
        }
    }
} 

#nop -- End Preference Management--
#alias autoBufPulse {
    #if {"$MSDP_ROOM_VNUM" != "13200"} {autoBuf}
}


#alias autoBuf {

    #if {$MSDP_RANGED == 0 && "$toggle[ranged]" == "on"} {
            nco ranged
    };

    #if {@hasAffect{haste} < 1} {
        #switch {"$MSDP_CLASS"} {
            #case {"Wizard"} {doHasteSpell};
        }
    };

    #nop -- Affects that must exhaust completely;
    #if {@hasAffect{warcry} < 1} {doWarcry};
    #if {@hasAffect{tale of valor} < 1} {doTaleOfValor};

    #if {@hasAffect{spiritual guardian} < 1} {doSpiritGuardian};
    #if {@hasAffect{divine shield} < 1} {doDivineShield};
    #if {@hasAffect{blade barrier} < 1} {doBladeBarrier};
    #if {@hasAffect{static field} < 1} {doStaticField};
    #if {@hasAffect{grim ward} < 1} {doGrimWard};
    #if {@autobuf_check{focus} && @hasAffect{focus} < 1} {doFocus};

    #nop -- Affects we can renew during the last tick;
    #if {@hasAffect{unholy aura} < 2} {doUnholyAura};
    #if {@hasAffect{divine armor} < 2} {doDivineArmor};
    #if {@hasAffect{vigor} < 2} {doVigor};
    #if {@hasAffect{barkskin} < 2} {doBarkskin};
    #if {@hasAffect{bless} < 2} {doBless};
    #if {@hasAffect{crystal eyes} < 2} {doCrystalEyes};

    #nop TODO looping MSDP_AFFECTS isn't good enough, we need to do expired ones as well;
    #nop We also don't want events on negative ones;
    #foreach {*_autobufs[%*]} {tmp} {
        #if {(@autobuf_check{$tmp}) && (@hasAffect{$tmp} <= $_autobufs[$tmp][threshold])} {
            notice autobuf Need affect $tmp;
            event_raise {autobuf expiration} {$tmp} {@hasAffect{$tmp}}
        } {
            info autobuf $tmp at @hasAffect{$tmp}, above duration;
        }
    }
}

#alias autobuf_handler {
    #if {"$_autobufs[%1][method]" != "none"} {
        #switch {"%1"} {
            #case {"faerie fire"} {doFFire $_autobufs[%1][method]};
            #case {"sanctuary"} {doSanctuary $_autobufs[%1][method]};
            #case {"shapechange"} {doShapechange $_autobufs[%1][method]};
            #case {"true seeing"} {doTruesee $_autobufs[%1][method]};
            #case {"strength"} { doStrength $_autobufs[%1][method]};
            #default {err autobuf No autobuf_handler for %1}
        }
    }
}

#alias doCrystalEyes {
    #if { "$toggle[ceyes]" == "on" && @hasAffect{true seeing} < 0} { 
        queueAdd nco {ceyes} 
    }
}

#alias doTruesee {
    #nop %0;
        #switch {"$MSDP_CLASS"} {
            #case {"Prophet"} {queueAdd nco {true}};
            #case {"Druid"} {queueAdd nco {true}};
            #case {"Templar"} {queueAdd nco {true}};
            #default {
                #if {"$remort[TRUE]" == "1"} {
                    queueAdd nco {true}
                };
                #elseif {@groupClassIsPresent{TEM} || @groupClassIsPresent{PRO}} {
                    queueAdd nco {gt all true $MSDP_CHARACTER_NAME}
                }
            }
        };
}

#alias doStrength {
    #nop %0;
    #switch {"$MSDP_CLASS"} {
        #case {"Mage"} {queueAdd nco {strength}};
        #case {"Wizard"} {queueAdd nco {strength}};
        #case {"Necromancer"} {queueAdd nco {strength}};
        #case {"Prophet"} {queueAdd nco {strength}};
        #default {err autobuf No class handler for 'strength'};
    }
}

#alias doSanctuary {
    #switch {"%1"} {
			#case {"auto"} { nco doSmartSanct};
            #case {"spell"} { nco doSpellSanct};
            #case {"gt"} {nco gt all sanct group};
            #case {"potion"} {
                #if {@is_alias{potion}} {
                        queueAdd nco {potion sanctuary}
                    } {
                        warn autobuf No 'potion' alias defined and method set to potion, see 'help kallisti/autobuf'
                    };
            };
            #case {"spell"} {doSpellSanct};
    };
}

#alias doFFire {
    #switch {"%1"} {
        #case {"auto"} {
            #if { (@epoch{} - $lastFFire < $ffireDelay) } { #return 1 } {#var lastFFire @epoch{}};
            #if {(&MSDP_GROUP) && (&MSDP_GROUP[] > 1) } {
                #if {$MSDP_MANA > 100} {queueAdd nco {ffire group}}
            } {
                #if {$MSDP_MANA > 40}  {queueAdd nco {ffire}}
            }

        };
        #case {"none"} {#nop};
        #default {warn autobuf No method '%1' for faerie fire.};
    };
}

#alias doShapechange {
    warn autobuf shapechange to %1;
    #if {"%1" == "werewolf"} {
        queueAdd nco {werewolf}
    };
    #else {
		#switch {"$MSDP_CLASS"} {
			#case {"Druid"} {queueAdd nco {shapechange %1}};
			#case {"Necromancer"} {queueAdd nco {mortify %1}};
            #default { err autobuf No method for shapechange for $MSDP_CLASS}
		};
    };
};


#nop -- Legacy handlers below



#alias doWarcry {
    #if { (@epoch{} - $lastWarcry < 20) } { 
        #nop
    } {
        #if { "$toggle[warcry]" == "on"} { queueAdd any {warcry} };
        #VARIABLE lastWarcry @epoch{}
    };
}

#alias doTaleOfValor {
    #if {"$toggle[tale]" == "on" && &MSDP_GROUP[] > 1} { queueAdd nco {tale}}
}

#alias doHasteSpell {
    #if { "$toggle[haste]" == "on" } {
        #if {(&MSDP_GROUP) && (&MSDP_GROUP[] > 1) } {
            #if {$MSDP_MANA > 160} {queueAdd nco {haste group}}
        } {
            #if {$MSDP_MANA > 40}  {queueAdd nco {haste}}
        }
    };
}

#alias doDivineArmor {
    #if {@autobuf_check{darmor} && ("$autodarmor" == "on")} {
        #if { ("$MSDP_CLASS" == "Templar") || ("$MSDP_CLASS" == "Prophet") } {
            #if {(&MSDP_GROUP) && (&MSDP_GROUP[] > 1) } {
                #if {$MSDP_MANA > 160} {queueAdd nco {darmor group}}
            } {
                #if {$MSDP_MANA > 40}  {queueAdd nco {darmor}}
            }
        }
    }
}

#alias doDivineShield {
    #if {@autobuf_check{dshield} && ("$autodshield" == "on")} {
        #switch {"$MSDP_CLASS"} {
            #case {"Templar"} {#if {$MSDP_MANA > 160} {queueAdd nco {dshield}}};
            #default {warn autobuf Divine Shield preference is on but you are class $MSDP_CLASS}
        }
    }
}

#alias doSpiritGuardian {
    #if {@autobuf_check{guardian} && ("$toggle[guardian]" == "on")} {
        #if {$MSDP_MANA > 40}  {queueAdd nco {spirit}}
    }
}

#alias doBladeBarrier {
    #if {@autobuf_check{blade barrier} && ("$toggle[bladebarrier]" == "on")} {
        #if {$MSDP_MANA > 40}  {queueAdd nco {blade}};
    }
}

#alias doVigor {
    #if {@autobuf_check{vigor} && ("$autovigor" == "on")} {
        #if {"$MSDP_CLASS" == "Prophet" || 
                "$MSDP_CLASS" == "Druid" ||
                "$MSDP_CLASS" == "Templar"} {
            #if {(&MSDP_GROUP) && (&MSDP_GROUP[] > 1) } {
                #if {$MSDP_MANA > 100} {queueAdd nco {vigor group}}
            } {
                #if {$MSDP_MANA > 40}  {queueAdd nco {vigor}}
            }
        } {
            #if {@groupClassIsPresent{Prophet} || @groupClassIsPresent{Templar} || @groupClassIsPresent{Druid}} {
                #if {&MSDP_GROUP[] > 1} {queueAdd nco gt all vigor group}
            }
        }
    }
}

#alias doBarkskin {
    #if {(@autobuf_check{barkskin}) && ("$autobark" == "on")} {
	    #switch {"$MSDP_CLASS"} {
		    #case {"Druid"} {
				#if {(&MSDP_GROUP) && (&MSDP_GROUP[] > 1) } {
					#if {$MSDP_MANA > 100} {queueAdd nco {barkskin group}}
				} {
					#if {$MSDP_MANA > 40}  {queueAdd nco {barkskin}}
				}
			}
		};
	}
}

#alias doStaticField {
    #if {@autobuf_check{static field} && ("$autostatic" == "on")} {
	    #switch {"$MSDP_CLASS"} {
	    	#case {"Wizard"} {
                #if {(&MSDP_GROUP) && (&MSDP_GROUP[] > 1) } {
                    #if {$MSDP_MANA > 100} {queueAdd nco {static group}}
                } {
                    #if {$MSDP_MANA > 40}  {queueAdd nco {static}}
                }
            }
	    }
	}
}

#alias doUnholyAura {
    #if {@autobuf_check{aura} && ("$autoaura" == "on")} {
	    #switch {"$MSDP_CLASS"} {
	    	#case {"Dreadlord"} {
	       		#if {(&MSDP_GROUP) && (&MSDP_GROUP[] > 9) } {
                    #if {$MSDP_MANA > 100} {queueAdd nco {aura group}}
                } {
                    #if {$MSDP_MANA > 40}  {queueAdd nco {aura}}
                }
	    	};
	    	#case {"Necromancer"} {
                #if {(&MSDP_GROUP) && (&MSDP_GROUP[] > 2) } {
                    #if {$MSDP_MANA > 100} {queueAdd nco {aura group}}
                } {
                    #if {$MSDP_MANA > 40}  {queueAdd nco {aura}}
                }
            }
	    }
    } 
}

#alias doFocus {
    #if {"$toggle[focus]" == "on"} {
        nco focus $focusStat
    }
}

#alias doGrimWard {
	#switch {"$MSDP_CLASS"} {
		#case {"Necromancer"} {
			#if { ("$autogrim" == "on") } {
                #if { @autobuf_check } {
				    #if {(&MSDP_GROUP) && (&MSDP_GROUP[] > 2) } {
				    	#if {$MSDP_MANA > 100} {queueAdd nco {grimw group}}
				    } {
				    	#if {$MSDP_MANA > 40}  {queueAdd nco {grimw}}
				    }
                }
			}
        }
	}
}

#alias doBless {
	#switch {"$MSDP_CLASS"} {
		#case {"Druid"} {
			#if { ("$autobless" == "on") } {
			    #if { @autobuf_check } {
                        #if {(&MSDP_GROUP) && (&MSDP_GROUP[] > 1) } {
                            #if {$MSDP_MANA > 100} {queueAdd nco {bless}}
                        } {
                            #if {$MSDP_MANA > 40}  {queueAdd nco {bless}}
                        }
                }
			}
		};
	}
}



#alias doSpellSanct {
    #if {(&MSDP_GROUP) && (&MSDP_GROUP[] > 1) } {
        #if {$MSDP_MANA > 160} {queueAdd nco {sanct group}}
    } {
        #if {$MSDP_MANA > 40}  {queueAdd nco {sanct}}
    }
}

#alias doSmartSanct {
    #if {$remort[SANCT]} {doSpellSanct} {
        #switch {"$MSDP_CLASS"} {
            #case {"Prophet"} {doSpellSanct};
            #case {"Templar"} {doSpellSanct};
            #default {
                #if {@groupClassIsPresent{TEM} || @groupClassIsPresent{PRO}} {
                    queueAdd nco {gt all sanct group}
                } {
                    sanctPotion
                };
            }
        }
    }
}

#alias sanctPotion {pg purple;quaff purple};


#nop -- functions below

#function autobuf_check {
    #if {!&{autobuf_last[%1]}} {#var autobuf_last[%1] 0};
    #if { (@epoch{} - $autobuf_delay) > $autobuf_last[%1] } {
        #var autobuf_last[%1] @epoch{};
        #return 1
    } {
        #return 0
    }
}

#function autobuf_abbreviations {
    #regex {sanctuary} {{^%1}} {#return sanctuary};
    #return %1
}

#class autobuf close
#nop -- vim: syntax=tt
