#nop --
#nop Class Definitions
#nop --

#var kallisti/meta-description {Meta assistance and advice}
#var kallisti/autobuf-help {
This module provides meta advice for every class.  It will suggest\n
the optimal choice of h/m/s for the lowest cost for most hero points.\n
\n
It also adds a metaTotal command to add up your metas, and metaReport\n
to endlessly disappoint you with how much xp and gold you've used.
}

#nop --
#nop Modloader Stuff
#nop --

#alias kallisti/meta-register {
	#if {@isloaded{queues}} {
		register_module kallisti/meta
	} {
		fail_module kallisti/meta Need queues module
	}
}
init BASE_HEROS preferences 0
init TARGET_HEROS preferences 0
init metaXPCost preferences 0
init metaAUCost preferences 0
init metaHero preferences 0

#list metaGains[Immortal] create 1.0 1.0 1.0
#list metaGains[Mage] create 3.5 5.5 3.5
#list metaGains[Wizard] create 3.5 5.5 3.5
#list metaGains[Necromancer] create 3.5 5.5 3.5

#list metaGains[Priest] create 4 5 3.5
#list metaGains[Templar] create 5 5 3
#list metaGains[Druid] create 4 5 4
#list metaGains[Prophet] create 3.5 6 3.5

#list metaGains[Rogue] create 5.5 1.0 6.0
#list metaGains[Assassin] create 5.5 1 6.5
#list metaGains[Demoniac] create 4.5 3.5 5.0
#list metaGains[Bard] create 4.5 3.5 5

#list metaGains[Fighter] create 6.0 1.0 5.5
#list metaGains[Barbarian] create 6.5 1.0 5.5
#list metaGains[Ranger] create 5.5 2.0 5.5
#list metaGains[Dreadlord] create 6.0 3.0 4.5
#list metaGains[Paladin] create 6.0 3.0 4.5
#list metaGains[Valkyrie] create 6.0 3.0 4.5

#list metaGains[Monastic] create 5.0 2.5 5.0
#list metaGains[Monk] create 5.0 3.0 5.0
#list metaGains[Samurai] create 6.0 2.5 4.5

#list metaHerosPer[Immortal] create 1.0 1.0 1.0

#list metaHerosPer[Fighter] create 2.45 0.10 1.65
#list metaHerosPer[Barbarian] create 2.45 0.1 1.65
#list metaHerosPer[Paladin] create 2.3 1.5 1.3
#list metaHerosPer[Dreadlord] create 2.3 1.3 1.5
#list metaHerosPer[Ranger] create 2.3 1.3 1.5
#list metaHerosPer[Valkyrie] create 2.3 1.5 1.3

#list metaHerosPer[Rogue] create 2.40 0.10 1.70
#list metaHerosPer[Assassin] create  2.4 0.1 1.7
#list metaHerosPer[Demoniac] create 2.25 1.6 1.55
#list metaHerosPer[Bard] create 2.1 1.7 1.5

#list metaHerosPer[Priest] create 2.0 2.45 0.85
#list metaHerosPer[Templar] create 2.0 2.2 1.0
#list metaHerosPer[Druid] create 1.9 2.35 0.95
#list metaHerosPer[Prophet] create 1.70 2.80 0.85

#list metaHerosPer[Mage] create 1.75 2.8 0.8
#list metaHerosPer[Necromancer] create 1.75 2.8 0.8
#list metaHerosPer[Wizard] create 1.75 2.8 0.8

#list metaHerosPer[Monastic] create 2.4 1.4 1.5
#list metaHerosPer[Monk] create 2.25 1.5 1.5
#list metaHerosPer[Samurai] create 2.4 0.2 1.95



#action {meta'd %1 to %2, cost = %3xp, %4gp} {
	#math {metaExpTotal} {$metaExpTotal+%3};
	#math {metaTotalGold} {$metaTotalGold+%4}
}

#tab metaTotal
#alias {metaTotal} {
	#var {metaExpTotal} {0};
	#var {metaTotalGold} {0};
	meta
}

#tab metaReport
#alias {metaReport} {

    #format {_line1} {<g23> Total exp Meta'd: <efc>%g} {$metaExpTotal};
    #format {_line2} {<g23>Total gold Meta'd: <fea>%-15g} {$metaTotalGold};
    #echo $_line1;
    #echo $_line2;
}

#tab metaCost 
#alias metaCost {
    
    #math {metaavg} { ($metaXPCost[hp] + $metaXPCost[mana] + $metaXPCost[stam]) / 3};
    #math tmp {$MSDP_EXPERIENCE / $metaavg};

    #echo {Current Meta Costs (est. @estimated_metas{} metas with current XP):};
    #echo { HitP: $metaXPCost[hp] ($metaHero[hp] per hero)};
    #echo { Mana: $metaXPCost[mana] ($metaHero[mana] per hero)};
    #echo { Stam: $metaXPCost[stam] ($metaHero[stam] per hero)};
    
}

#nop -- ---------------------------------------------------------------
#nop -- Autometa functions
#nop -- ---------------------------------------------------------------
#function one_meta_cost {
    #math {result} { ($metaXPCost[HitPoints] + $metaXPCost[Mana] + $metaXPCost[Stamina]) / 3};
}
#function estimated_metas {
    #math result {$MSDP_EXPERIENCE / @one_meta_cost{}}
}
#function metaHero {
    #switch {"%1"} {
        #case {"HitPoints"} {
            #math _metaHH {$metaGains[$MSDP_CLASS][1] * $metaHerosPer[$MSDP_CLASS][1]};
            #return $_metaHH
        };
        #case {"Mana"} {
            #math _metaHM {$metaGains[$MSDP_CLASS][2] * $metaHerosPer[$MSDP_CLASS][2]};
            #return $_metaHM
        };
        #case {"Stamina"} {
            #math _metaHS {$metaGains[$MSDP_CLASS][3] * $metaHerosPer[$MSDP_CLASS][3]};
            #return $_metaHS
        }
    }
}


#alias autometa {
    #var autometa on;
    list
}

#action {^Welcome to the Meta shop where you can enhance yourself in miraculous ways!$} {
    #var meta_screen 1;
    #var meta_borders 0
}

#action {^================================================================================$} {
    #if {$meta_screen == 1} {
        #if {$meta_borders == 1} {
            #var meta_screen 0;
            recMeta
        };
        #else {
            #var meta_borders 1
        }
    }
}

#action {{^Max(\w+) \[*.+\]\s+(\d+)\s+(\d+)\s+\d+\s+\d+\s+[0-9\.]+ avg$}} {
    #nop h/m/s = %2, exp = %3, au = %4;
    #var metaXPCost[%2] %3;
    #var metaAUCost[%2] %4;
    #math {metaHero[%2]} { $metaXPCost[%2] / @metaHero{%2} };
}

#alias {recMeta} {
    #if { ($metaHero[HitPoints] < $metaHero[Stamina]) & ($metaHero[HitPoints] < $metaHero[Mana])} {
        #var meta_rec HitPoints
    };
    #elseif { ($metaHero[Mana] < $metaHero[HitPoints]) & ($metaHero[Mana] < $metaHero[Stamina])} {
        #var meta_rec Mana
    };
    #elseif { ($metaHero[Stamina] < $metaHero[HitPoints]) & ($metaHero[Stamina] < $metaHero[Mana])} {
        #var meta_rec Stamina
    };
    #else {
        #var meta_rec None
    };
    #if {"$meta_rec"=="None"} {
        #show {<028>Unable to provide meta advice, check values in meta.tin.}
    };
    #else {
        #showme $metaHero[HitPoints] | $metaHero[Mana] | $metaHero[Stamina];
        #format {metarec_line} {%%80s} {<028>Meta <128>$meta_rec <028>for the most herps per experience point. <068>(@hNum{$metaHero[$meta_rec]} / per)};
        #showme {$metarec_line};
        _conditional_meta $meta_rec
    };
    #if {"$auto[meta]" == "on"} {
        meta $meta_rec
    }
}

#alias _conditional_meta {
    #if {&{MSDP_HERO_POINTS} && "$autometa" == "on" && ${MSDP_HERO_POINTS} < $TARGET_HEROS} {
        buy %1;
        list
    } {
        #if {${MSDP_HERO_POINTS} > $TARGET_HEROS} {
            #showme <cca>AUTOMETA DISABLED - reached $MSDP_HERO_POINTS hero points ($TARGET_HEROS is target).;
        } {
            #showme <cca>AUTOMETA DISABLED.;
        };
        #var autometa off
    }
}

#act {^The meta-sage tells you 'You don't have enough gold.} {#var autometa off}
#act {^The meta-sage tells you 'You don't have enough experience.} {#var autometa off}
#act {^The meta-sage tells you 'Go level instead!'} {#var autometa off}

#nop -- vim: syntax=tt
