#nop --
#nop Class Definitions
#nop --

#var kallisti/odometer-description {Measures various performance metrics}
#var kallisti/odometer-help {
You can use the odometer_reset command to reset the XP counters.
}

#nop --
#nop Modloader Stuff
#nop --

#alias kallisti/odometer-register {
	#if {@isloaded{events}} {
		register_module kallisti/odometer
	} {
		fail_module kallisti/odometer Module 'events' not loaded
	}
}

event_register {variable MSDP_WORLD_TIME} {odometer} {odometer};
event_register {variable MSDP_UPTIME} {odometer} {odometer_uptime};
event_register {level gain} {odometer} {odometer_reset};

init _last_xp odometer ${MSDP_EXPERIENCE};

#alias odometer {
	#nop %0;
	#var _meter[KILLS][${MSDP_WORLD_TIME}] 0;
	#math {_meter[XP][${MSDP_WORLD_TIME}]} {${MSDP_EXPERIENCE} - ${_last_xp}};
	#var _last_xp ${MSDP_EXPERIENCE};
	update_xp_block
}

event_register {mob kill} {odometer} {odometer_kills};
#alias odometer_kills {
    #nop %0;
    #math {_meter[KILLS][${MSDP_WORLD_TIME}]} {$_meter[KILLS][${MSDP_WORLD_TIME}] + 1};
}

#tab show_kills
#alias show_kills {
    #local _kills 0;
    #local _gaps 0;
    #foreach {*_meter[KILLS][%*]} {_t} {
        #math {_kills} {$_kills + $_meter[KILLS][$_t]};
        #if {$_meter[KILLS][%*] == 0} {
            #math {_gaps} {$_gaps + 1};
        };
    };
    gt $_kills kills over last &_meter[KILLS][] ticks, $_gaps gaps
}

#function sum_kills {
    #local _kills 0;
    #foreach {*_meter[KILLS][%*]} {_t} {
        #math {_kills} {$_kills + $_meter[KILLS][$_t]};
    };
    #return $_kills
}

#tab show_xp
#alias show_xp {
	#var _total 0;
	#foreach {${_meter[XP][%*]}} {tmp}  {
		#math {_total} {${_total} + ${tmp}}
	};
	#math {_avg} {(1.00 *${_total}) / &{_meter[XP][]}};
	#showme Average xp over last &{_meter[XP][]} ticks: ${_avg};
}

#tab odometer_reset
#alias odometer_reset {
	#nop %0;
	#unvar _meter[XP];
	#var _meter[KILLS] 0;
	#var _last_xp ${MSDP_EXPERIENCE};
	update_xp_block
}

#alias odometer_uptime {
	#nop %0;
	#var uptime_seconds $MSDP_UPTIME;
	#math uptime_minutes {$uptime_seconds / 60};
	#math uptime_seconds {$uptime_seconds % 60};
	#math uptime_hours {$uptime_minutes / 60};
	#math uptime_minutes {$uptime_minutes % 60};
	#math uptime_days {$uptime_hours / 24};
	#math uptime_hours {$uptime_hours % 24};
	#var uptime_block {Up: <188>$uptime_days days, $uptime_hours hours, $uptime_minutes minutes<088>}
}

#alias update_xp_block {
	#var xp_block {XP/hr: <188>@avg_xp_per_hour{}<088><F5f819d> over <188>&_meter[XP][%*]<088><F5f819d> ticks};
	#math _ttc {((@xpbanksize{} - $MSDP_EXPERIENCE) / @avg_xp{}) * 75/60};

	#if {$MSDP_EXPERIENCE_TNL > 0} {
		#math _ttl {($MSDP_EXPERIENCE_TNL / @avg_xp{}) * 75/60};
		#var xp_block {$xp_block\nApprox. <188>$_ttl<088><F5f819d> mins to level\nApprox. <188>$_ttc<088><F5f819d> mins to cap<088><F5f819d>}
	} {
		#var xp_block {$xp_block\nApprox. <188>$_ttc<088><F5f819d> mins to cap\nKill/hr: <188>@avg_kills_per_hour{}<088><F5f819d> over <188>&_meter[KILLS][%*]<088><F5f819d> ticks};
	}
}

#function avg_xp_per_hour {
	#var _total 0;
	#foreach {${_meter[XP][%*]}} {tmp}  {
		#math {_total} {${_total} + ${tmp}}
	};
	#math {result} {48 * (1.00 *${_total}) / &{_meter[XP][]}};
	#var result @hNum{$result}
}

#function avg_kills_per_hour {
	#var _total 0;
	#foreach {${_meter[KILLS][%*]}} {tmp}  {
		#math {_total} {${_total} + ${tmp}}
	};
	#math {result} {48 * (1.00 *${_total}) / &{_meter[KILLS][]}};
	#var result @hNum{$result}
}

#func avg_xp {
	#var _total 0;
	#foreach {${_meter[XP][%*]}} {tmp}  {
		#math {_total} {${_total} + ${tmp}}
	};
	#math {result} {(1.00 *${_total}) / &{_meter[XP][]}};
}

#al tnl {
	#math _ttl {($MSDP_EXPERIENCE_TNL / @avg_xp{}) * 75/60};
	gt XP: &0b@avg_xp_per_hour{}/hr&0e over last &0b&_meter[XP][%*]&0e ticks, Kills: &0b@avg_kills_per_hour{}&0e TNL: &0b@hNum{${MSDP_EXPERIENCE_TNL}}&0e, &0b$_ttl &0emins to level
}

#action {^--+  Congratulations, you are now level %d!} {
	event_raise {level gain} {%1}
}

set_right_tile 4 <F5f819d> xp_block 3 tile;
set_right_tile 5 <F5f819d> uptime_block 1 tile

#nop vim: syntax=tt
